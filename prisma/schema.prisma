generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin?
  Faculty   Faculty?
  Student   Student?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Faculty {
  id        String      @id @default(uuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project   Project[]
  Programme Programme[]
}

model Student {
  id           String         @id @default(uuid())
  userId       String         @unique
  projectId    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  projectPlan  ProjectPlan[]
  Registration Registration[]
  Project      Project?       @relation(fields: [projectId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Programme {
  id         String        @id @default(uuid())
  name       ProgrammeName
  semesterId String
  Semester   Semester      @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  leader     String
  Leader     Faculty?      @relation(fields: [leader], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]

  @@unique([name, semesterId])
}

model Project {
  id               String         @id @default(uuid())
  title            String
  description      String
  status           ProjectStatus  @default(PENDING)
  numberOfStudents Int
  programme        String
  Programme        Programme      @relation(fields: [programme], references: [id])
  facultyId        String
  faculty          Faculty        @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  project_plan     ProjectPlan[]
  Registration     Registration[]
  students         Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectPlan {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, projectId])
}

model Registration {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, projectId])
}

model Semester {
  id               String            @id @default(uuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  SemesterTimeline SemesterTimeline?
  Programme        Programme[]
}

model SemesterTimeline {
  id                             String   @id @default(uuid())
  semesterId                     String   @unique
  facultyProposalSubmissionStart DateTime
  facultyProposalSubmissionEnd   DateTime
  studentRegistrationStart       DateTime
  studentRegistrationEnd         DateTime
  facultyMarkEntryStart          DateTime
  facultyMarkEntryEnd            DateTime
  studentPeerReviewStart         DateTime
  studentPeerReviewEnd           DateTime
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  Semester                       Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ProgrammeName {
  CommunicationsEngineering
  ComputerControlAndAutomation
  Electronics
  PowerEngineering
  SignalProcessing
}
