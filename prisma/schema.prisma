generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  faculty   Faculty?
  student   Student?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Faculty {
  id        String      @id @default(uuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  programme Programme[]
  Project   Project[]
  Grade     Grade[]
}

model Student {
  id                  String         @id @default(uuid())
  userId              String         @unique
  projectId           String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  matriculationNumber String         @unique
  plans               ProjectPlan[]
  registrations       Registration[]
  project             Project?       @relation(fields: [projectId], references: [id])
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Grade               Grade[]
}

model Programme {
  id            String    @id @default(uuid())
  name          String
  semesterId    String
  leaderId      String
  programmeCode String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  leader        Faculty   @relation(fields: [leaderId], references: [id])
  semester      Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  projects      Project[]

  @@unique([name, semesterId])
}

model Project {
  id            String         @id @default(uuid())
  title         String
  description   String
  programmeId   String
  status        ProjectStatus  @default(PENDING)
  facultyId     String
  projectCode   String
  venueId       String?
  reviewMessage String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  faculty       Faculty        @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  programme     Programme      @relation(fields: [programmeId], references: [id])
  projectPlans  ProjectPlan[]
  registrations Registration[]
  students      Student[]
  venue         Venue?         @relation(fields: [venueId], references: [id], onDelete: SetNull)
  Grade         Grade[]
}

model ProjectPlan {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, projectId])
}

model Registration {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, projectId])
}

model Semester {
  id                       String            @id @default(uuid())
  name                     String            @unique
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  active                   Boolean           @default(false)
  projectApplicationsLimit Int
  minimumGroupSize         Int
  maximumGroupSize         Int
  programmes               Programme[]
  timeline                 SemesterTimeline?
  venues                   Venue[]
  SemesterGradeType        GradeType[]
}

model SemesterTimeline {
  id                             String   @id @default(uuid())
  semesterId                     String   @unique
  facultyProposalSubmissionStart DateTime
  facultyProposalSubmissionEnd   DateTime
  facultyProposalReviewStart     DateTime
  facultyProposalReviewEnd       DateTime
  studentRegistrationStart       DateTime
  studentRegistrationEnd         DateTime
  facultyMarkEntryStart          DateTime
  facultyMarkEntryEnd            DateTime
  studentPeerReviewStart         DateTime
  studentPeerReviewEnd           DateTime
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  semester                       Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}

model Venue {
  id         String    @id @default(uuid())
  name       String
  location   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
  semesterId String
  semester   Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([name, semesterId, location])
}

model Grade {
  id                  String   @id @default(uuid())
  projectId           String
  studentId           String
  facultyId           String
  score               Float?
  semesterGradeTypeId String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  semesterGradeType GradeType @relation(fields: [semesterGradeTypeId], references: [id])
  project           Project   @relation(fields: [projectId], references: [id])
  student           Student   @relation(fields: [studentId], references: [id])
  faculty           Faculty   @relation(fields: [facultyId], references: [id])

  @@unique([studentId, projectId, facultyId, semesterGradeTypeId])
}

model GradeType {
  id         String   @id @default(uuid())
  name       String   @unique
  semesterId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  Grade      Grade[]

  @@unique([name, semesterId])
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
