generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../dbml"
  outputName = "awesome.dbml"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  faculty   Faculty?
  student   Student?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Faculty {
  id             String           @id @default(uuid())
  userId         String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Grade          Grade[]
  programme      Programme[]
  Project        Project[]
  Remark         Remark[]
  ProjectFaculty ProjectFaculty[]
}

model Student {
  id                  String          @id @default(uuid())
  userId              String          @unique
  projectId           String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  matriculationNumber String          @unique
  Grade               Grade[]
  RevieweePeerReviews PeerReview[]    @relation("RevieweePeerReviews")
  ReviewerPeerReviews PeerReview[]    @relation("ReviewerPeerReviews")
  plans               ProjectPlan[]
  registrations       Registration[]
  project             Project?        @relation(fields: [projectId], references: [id])
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Milestone           Milestone[]
  ProjectAppeal       ProjectAppeal[]
}

model Programme {
  id            String    @id @default(uuid())
  name          String
  semesterId    String
  leaderId      String
  programmeCode String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  leader        Faculty   @relation(fields: [leaderId], references: [id])
  semester      Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  projects      Project[]

  @@unique([name, semesterId])
}

model Project {
  id            String           @id @default(uuid())
  title         String
  description   String
  programmeId   String
  status        ProjectStatus    @default(PENDING)
  facultyId     String
  projectCode   String
  venueId       String?
  reviewMessage String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Grade         Grade[]
  PeerReview    PeerReview[]
  faculty       Faculty          @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  programme     Programme        @relation(fields: [programmeId], references: [id])
  venue         Venue?           @relation(fields: [venueId], references: [id])
  projectPlans  ProjectPlan[]
  registrations Registration[]
  students      Student[]
  Milestone     Milestone[]
  faculties     ProjectFaculty[]

  currentAppeals   ProjectAppeal[] @relation("CurrentProject")
  requestedAppeals ProjectAppeal[] @relation("RequestedProject")
}

model ProjectPlan {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, projectId])
}

model Registration {
  id        String   @id @default(uuid())
  studentId String
  projectId String
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, projectId])
}

model Semester {
  id                       String            @id @default(uuid())
  name                     String            @unique
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  active                   Boolean           @default(false)
  projectApplicationsLimit Int
  minimumGroupSize         Int
  maximumGroupSize         Int
  SemesterGradeType        GradeType[]
  programmes               Programme[]
  timeline                 SemesterTimeline?
  venues                   Venue[]
}

model SemesterTimeline {
  id                             String   @id @default(uuid())
  semesterId                     String   @unique
  facultyProposalSubmissionStart DateTime
  facultyProposalSubmissionEnd   DateTime
  facultyProposalReviewStart     DateTime
  facultyProposalReviewEnd       DateTime
  studentRegistrationStart       DateTime
  studentRegistrationEnd         DateTime
  facultyMarkEntryStart          DateTime
  facultyMarkEntryEnd            DateTime
  studentPeerReviewStart         DateTime
  studentPeerReviewEnd           DateTime
  studentResultRelease           DateTime
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  semester                       Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}

model Venue {
  id         String    @id @default(uuid())
  name       String
  location   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  semesterId String
  projects   Project[]
  semester   Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([name, semesterId, location])
}

model Grade {
  id                  String          @id @default(uuid())
  projectId           String
  studentId           String
  facultyId           String
  score               Float?
  semesterGradeTypeId String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  faculty             Faculty         @relation(fields: [facultyId], references: [id])
  project             Project         @relation(fields: [projectId], references: [id])
  semesterGradeType   GradeType       @relation(fields: [semesterGradeTypeId], references: [id])
  student             Student         @relation(fields: [studentId], references: [id])
  ProjectFaculty      ProjectFaculty? @relation(fields: [projectFacultyId], references: [id])
  projectFacultyId    String?

  @@unique([studentId, projectId, facultyId, semesterGradeTypeId])
}

model GradeType {
  id         String   @id @default(uuid())
  name       String   @unique
  weightage  Int      @default(0)
  semesterId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Grade      Grade[]
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([name, semesterId])
}

model PeerReview {
  id         String   @id @default(uuid())
  projectId  String
  reviewerId String
  revieweeId String
  rank       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studentId  String?
  project    Project  @relation(fields: [projectId], references: [id])
  reviewee   Student  @relation("RevieweePeerReviews", fields: [revieweeId], references: [id])
  reviewer   Student  @relation("ReviewerPeerReviews", fields: [reviewerId], references: [id])

  @@unique([projectId, revieweeId, reviewerId])
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Milestone {
  id          String          @id @default(uuid())
  projectId   String
  studentId   String
  objective   String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      MilestoneStatus
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Remark  Remark[]

  @@unique([projectId, studentId, startDate])
}

enum MilestoneStatus {
  NOT_STARTED // 0%
  STARTED // 20%
  NEARLY_HALF // 40%
  HALF_WAY_THERE // 60%
  ALMOST_DONE // 80%
  COMPLETED // 100%
}

model Remark {
  id          String   @id @default(uuid())
  milestoneId String
  facultyId   String
  remarks     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  faculty   Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@unique([milestoneId, facultyId])
}

model ProjectFaculty {
  id        String      @id @default(uuid())
  projectId String
  facultyId String
  role      FacultyRole
  project   Project     @relation(fields: [projectId], references: [id])
  faculty   Faculty     @relation(fields: [facultyId], references: [id])
  grades    Grade[]

  @@unique([projectId, facultyId])
}

model FacultyRoleWeightage {
  id        String      @id @default(uuid())
  role      FacultyRole
  weightage Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([role])
}

enum FacultyRole {
  SUPERVISOR
  MODERATOR
  NO_ROLE
}

model ProjectAppeal {
  id                 String       @id @default(uuid())
  studentId          String
  currentProjectId   String
  requestedProjectId String
  reason             String
  status             AppealStatus @default(PENDING)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  student          Student @relation(fields: [studentId], references: [id])
  currentProject   Project @relation("CurrentProject", fields: [currentProjectId], references: [id])
  requestedProject Project @relation("RequestedProject", fields: [requestedProjectId], references: [id])
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
}
